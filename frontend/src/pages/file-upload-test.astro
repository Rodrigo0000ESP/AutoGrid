---
import Layout from "../layouts/Layout.astro";

const title = "File Upload Test";
const description = "Test the file upload functionality";
---

<Layout {title} {description}>
  <div class="container mx-auto px-4 py-8 min-h-screen">
    <div id="auth-content">
      <div class="text-gray-600 text-center py-8">Checking authentication...</div>
    </div>
    
    <div id="file-upload-content" class="hidden">
      <div class="max-w-4xl mx-auto">
        <h1 class="text-3xl font-bold text-gray-900 mb-8">File Upload Test</h1>
        
        <!-- Upload Section -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
          <h2 class="text-xl font-semibold text-gray-800 mb-4">Upload File</h2>
          
          <div class="mb-4">
            <label for="file-input" class="block text-sm font-medium text-gray-700 mb-2">
              Select File (PDF, DOC, DOCX, TXT - Max 10MB)
            </label>
            <input 
              type="file" 
              id="file-input" 
              accept=".pdf,.doc,.docx,.txt"
              class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
            />
          </div>
          
          <div class="mb-4">
            <label class="flex items-center">
              <input type="checkbox" id="replace-existing" checked class="mr-2">
              <span class="text-sm text-gray-700">Replace existing file (if any)</span>
            </label>
          </div>
          
          <button 
            id="upload-btn" 
            class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
            disabled
          >
            Upload File
          </button>
          
          <div id="upload-progress" class="hidden mt-4">
            <div class="bg-gray-200 rounded-full h-2">
              <div class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
            </div>
            <p class="text-sm text-gray-600 mt-1">Uploading...</p>
          </div>
        </div>

        <!-- Current File Section -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
          <h2 class="text-xl font-semibold text-gray-800 mb-4">Current File</h2>
          <div id="current-file-info">
            <p class="text-gray-500">Loading file information...</p>
          </div>
        </div>

        <!-- Storage Info Section -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
          <h2 class="text-xl font-semibold text-gray-800 mb-4">Storage Information</h2>
          <div id="storage-info">
            <p class="text-gray-500">Loading storage information...</p>
          </div>
        </div>

        <!-- Messages -->
        <div id="message-container" class="hidden mb-4">
          <div id="message" class="p-4 rounded-lg"></div>
        </div>

        <!-- Actions -->
        <div class="bg-white rounded-lg shadow-md p-6">
          <h2 class="text-xl font-semibold text-gray-800 mb-4">Actions</h2>
          <div class="space-x-4">
            <button 
              id="refresh-btn" 
              class="bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-lg"
            >
              Refresh Info
            </button>
            <button 
              id="download-btn" 
              class="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
              disabled
            >
              Download File
            </button>
            <button 
              id="delete-btn" 
              class="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
              disabled
            >
              Delete File
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Track if we've already handled the auth check
    let authCheckCompleted = false;
    let currentFileId: string | null = null;

    // Show message function
    function showMessage(message: string, type: 'success' | 'error' | 'info' = 'info') {
      const container = document.getElementById('message-container');
      const messageEl = document.getElementById('message');
      
      if (container && messageEl) {
        container.classList.remove('hidden');
        messageEl.textContent = message;
        messageEl.className = `p-4 rounded-lg ${
          type === 'success' ? 'bg-green-100 text-green-800 border border-green-200' :
          type === 'error' ? 'bg-red-100 text-red-800 border border-red-200' :
          'bg-blue-100 text-blue-800 border border-blue-200'
        }`;
        
        // Auto-hide success messages after 5 seconds
        if (type === 'success') {
          setTimeout(() => {
            container.classList.add('hidden');
          }, 5000);
        }
      }
    }

    // Format file size
    function formatFileSize(bytes: number): string {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Load file information
    async function loadFileInfo() {
      try {
        const { fileUploadService } = await import('../services/fileUploadService.js');
        const fileInfo = await fileUploadService.getMyFile();
        
        const container = document.getElementById('current-file-info');
        if (!container) return;

        if (fileInfo.file) {
          currentFileId = fileInfo.file.file_id;
          container.innerHTML = `
            <div class="space-y-2">
              <p><strong>Filename:</strong> ${fileInfo.file.filename}</p>
              <p><strong>Size:</strong> ${formatFileSize(fileInfo.file.size)}</p>
              <p><strong>Type:</strong> ${fileInfo.file.content_type}</p>
              <p><strong>Upload Date:</strong> ${new Date(fileInfo.file.upload_date).toLocaleString()}</p>
              <p><strong>Storage:</strong> ${fileInfo.file.storage_type}</p>
              <p><strong>File ID:</strong> <code class="bg-gray-100 px-2 py-1 rounded text-sm">${fileInfo.file.file_id}</code></p>
            </div>
          `;
          
          // Enable download and delete buttons
          const downloadBtn = document.getElementById('download-btn') as HTMLButtonElement;
          const deleteBtn = document.getElementById('delete-btn') as HTMLButtonElement;
          if (downloadBtn) downloadBtn.disabled = false;
          if (deleteBtn) deleteBtn.disabled = false;
        } else {
          currentFileId = null;
          container.innerHTML = '<p class="text-gray-500">No file uploaded yet.</p>';
          
          // Disable download and delete buttons
          const downloadBtn = document.getElementById('download-btn') as HTMLButtonElement;
          const deleteBtn = document.getElementById('delete-btn') as HTMLButtonElement;
          if (downloadBtn) downloadBtn.disabled = true;
          if (deleteBtn) deleteBtn.disabled = true;
        }
      } catch (error) {
        console.error('Error loading file info:', error);
        const container = document.getElementById('current-file-info');
        if (container) {
          container.innerHTML = `<p class="text-red-500">Error loading file info: ${error instanceof Error ? error.message : String(error)}</p>`;
        }
      }
    }

    // Load storage information
    async function loadStorageInfo() {
      try {
        const { fileUploadService } = await import('../services/fileUploadService.js');
        const storageInfo = await fileUploadService.getStorageInfo();
        
        const container = document.getElementById('storage-info');
        if (!container) return;

        container.innerHTML = `
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h3 class="font-medium text-gray-800 mb-2">Storage Details</h3>
              <div class="space-y-1 text-sm">
                <p><strong>Has File:</strong> ${storageInfo.storage_info.has_file ? 'Yes' : 'No'}</p>
                <p><strong>Used Storage:</strong> ${formatFileSize(storageInfo.storage_info.used_storage)}</p>
                <p><strong>Max File Size:</strong> ${formatFileSize(storageInfo.storage_info.max_file_size)}</p>
                <p><strong>Storage Type:</strong> ${storageInfo.storage_info.storage_type}</p>
              </div>
            </div>
            <div>
              <h3 class="font-medium text-gray-800 mb-2">Plan Information</h3>
              <div class="space-y-1 text-sm">
                <p><strong>Plan:</strong> ${storageInfo.plan_info.plan_name}</p>
                <p><strong>Trial:</strong> ${storageInfo.plan_info.is_trial ? 'Yes' : 'No'}</p>
              </div>
              <h3 class="font-medium text-gray-800 mb-2 mt-4">Allowed Extensions</h3>
              <div class="flex flex-wrap gap-1">
                ${storageInfo.storage_info.allowed_extensions.map(ext => 
                  `<span class="bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded">${ext}</span>`
                ).join('')}
              </div>
            </div>
          </div>
        `;
      } catch (error) {
        console.error('Error loading storage info:', error);
        const container = document.getElementById('storage-info');
        if (container) {
          container.innerHTML = `<p class="text-red-500">Error loading storage info: ${error instanceof Error ? error.message : String(error)}</p>`;
        }
      }
    }

    // Client-side authentication check
    const handleAuthCheck = async () => {
      if (authCheckCompleted) return;
      
      const authContent = document.getElementById('auth-content');
      const fileUploadContent = document.getElementById('file-upload-content');
      
      if (!authContent || !fileUploadContent) return;
      
      try {
        const { isAuthenticated } = await import('../services/authService.js');
        
        const isAuth = isAuthenticated();
        console.log('Auth status:', isAuth);
        
        if (isAuth) {
          // If authenticated, show file upload interface
          fileUploadContent.classList.remove('hidden');
          authContent.classList.add('hidden');
          authCheckCompleted = true;
          
          // Load initial data
          await loadFileInfo();
          await loadStorageInfo();
        } else {
          // If not authenticated, show login prompt
          authContent.innerHTML = `
            <div class="text-center py-12">
              <h2 class="text-2xl font-bold text-gray-900 mb-4">Authentication Required</h2>
              <p class="text-gray-600 mb-6">Please log in to access the file upload test.</p>
              <a href="/login" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg inline-block">
                Go to Login
              </a>
            </div>
          `;
        }
      } catch (error) {
        console.error('Auth check failed:', error);
        authContent.innerHTML = `
          <div class="text-center py-12">
            <h2 class="text-2xl font-bold text-red-600 mb-4">Error</h2>
            <p class="text-gray-600">Failed to check authentication status.</p>
          </div>
        `;
      }
    };

    // Setup event listeners
    const setupEventListeners = () => {
      // File input change
      const fileInput = document.getElementById('file-input') as HTMLInputElement;
      const uploadBtn = document.getElementById('upload-btn') as HTMLButtonElement;
      
      if (fileInput && uploadBtn) {
        fileInput.addEventListener('change', () => {
          uploadBtn.disabled = !fileInput.files || fileInput.files.length === 0;
        });
      }

      // Upload button
      if (uploadBtn) {
        uploadBtn.addEventListener('click', async () => {
          if (!fileInput || !fileInput.files || fileInput.files.length === 0) {
            showMessage('Please select a file to upload.', 'error');
            return;
          }

          const file = fileInput.files[0];
          const replaceExisting = (document.getElementById('replace-existing') as HTMLInputElement)?.checked ?? true;

          try {
            uploadBtn.disabled = true;
            uploadBtn.textContent = 'Uploading...';
            
            const { fileUploadService } = await import('../services/fileUploadService.js');
            const result = await fileUploadService.uploadFile(file, replaceExisting);
            
            showMessage(`File uploaded successfully! Plan: ${result.user_plan.plan_name}`, 'success');
            
            // Reset form and reload info
            fileInput.value = '';
            uploadBtn.disabled = true;
            await loadFileInfo();
            await loadStorageInfo();
            
          } catch (error) {
            console.error('Upload error:', error);
            showMessage(`Upload failed: ${error instanceof Error ? error.message : String(error)}`, 'error');
          } finally {
            uploadBtn.disabled = !fileInput.files || fileInput.files.length === 0;
            uploadBtn.textContent = 'Upload File';
          }
        });
      }

      // Refresh button
      const refreshBtn = document.getElementById('refresh-btn');
      if (refreshBtn) {
        refreshBtn.addEventListener('click', async () => {
          await loadFileInfo();
          await loadStorageInfo();
          showMessage('Information refreshed.', 'success');
        });
      }

      // Download button
      const downloadBtn = document.getElementById('download-btn');
      if (downloadBtn) {
        downloadBtn.addEventListener('click', async () => {
          if (!currentFileId) {
            showMessage('No file to download.', 'error');
            return;
          }

          try {
            const { fileUploadService } = await import('../services/fileUploadService.js');
            const fileInfo = await fileUploadService.getMyFile();
            
            if (fileInfo.file) {
              await fileUploadService.downloadFile(fileInfo.file.file_id, fileInfo.file.filename);
              showMessage('File download started.', 'success');
            } else {
              showMessage('No file found to download.', 'error');
            }
          } catch (error) {
            console.error('Download error:', error);
            showMessage(`Download failed: ${error instanceof Error ? error.message : String(error)}`, 'error');
          }
        });
      }

      // Delete button
      const deleteBtn = document.getElementById('delete-btn');
      if (deleteBtn) {
        deleteBtn.addEventListener('click', async () => {
          if (!currentFileId) {
            showMessage('No file to delete.', 'error');
            return;
          }

          if (!confirm('Are you sure you want to delete this file? This action cannot be undone.')) {
            return;
          }

          try {
            const { fileUploadService } = await import('../services/fileUploadService.js');
            const result = await fileUploadService.deleteFile(currentFileId);
            
            showMessage(`File deleted successfully: ${result.deleted_file.filename}`, 'success');
            
            // Reload info
            await loadFileInfo();
            await loadStorageInfo();
            
          } catch (error) {
            console.error('Delete error:', error);
            showMessage(`Delete failed: ${error instanceof Error ? error.message : String(error)}`, 'error');
          }
        });
      }
    };

    // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
      handleAuthCheck();
      setupEventListeners();
    });

    // Also run on page load (fallback)
    window.addEventListener('load', () => {
      if (!authCheckCompleted) {
        handleAuthCheck();
      }
    });
  </script>

</Layout>
